Event Queue Pattern 


В очереди хранятся серии уведомлений или запросов в порядке «первым пришел - первым вышел». Отправка уведомления ставит в очередь запрос и возвращает. 
Затем обработчик запросов обрабатывает элементы из очереди позднее. Запросы могут быть обработаны напрямую или направлены заинтересованным сторонам. 
Это отделяет отправителя от получателя как статически, так и во времени.


Когда это использовать

Если вы хотите отделить только тех, кто получает сообщение от отправителя, такие шаблоны, как Observer и Command.
Очередь нужна только тогда, когда вы хотите что-то разъединить во времени.

Есть код A, который хочет, чтобы другой блок B выполнил некоторую работу. Естественный способ инициировать это - отправить запрос B.

Между тем, естественный способ для B обработать этот запрос - вывести его в удобное время в цикле выполнения. 
Если на одном конце у вас есть push-модель, а на другом - модель pull, вам нужен буфер между ними. 
Это то, что обеспечивает очередь, чего нет в более простых шаблонах развязки.

Очереди дают контроль над кодом, который извлекается из него - получатель может задерживать обработку, 
агрегировать запросы или полностью отбрасывать их. Но очереди делают это, забирая контроль у отправителя. 
Все, что может сделать отправитель, - это отправить запрос в очередь и надеяться на лучшее. 
Этот шаблон не подходит, когда отправителю требуется быстрый ответ.